package com.example.demo;

import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.boot.test.web.server.LocalServerPort;
import org.springframework.util.Assert;

import static org.assertj.core.api.Assertions.assertThat;

@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)

class DemoApplicationTests { 
	
	// test on a local port generated by RANDOM_PORT
	@LocalServerPort
	private int port = 8080;
	
	@Autowired
	private TestRestTemplate restTemplate;
	private static DateTimeFormatter formatter = 
			DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss a z");
	
	@Test // testing if "hello 
	public void greetingShouldReturnDefaultMessage() throws Exception{ 
		assertThat(this.restTemplate.getForObject("http://localhost:" + port + "/hello"
				,String.class)).contains("Hello world");
		
	}
	
	// sanity test 
	@Test
	public void contextLoads() {
		
	}
	
	@Test
	public void testLocalTime() {
		timeZone tz = new timeZone(); 
		tz.setName("UTC-4");
		tz.setTz("UTC-4");
		
		ZonedDateTime time = ZonedDateTime.now(ZoneId.of(tz.getTz()));
		String format = "yyyy-MM-dd 'at' HH:mm:ss z"; 
		
		assertThat(this.restTemplate.postForObject("http://localhost:" + port + "/Localtime", 
				tz, String.class)).isEqualTo(time.format(DateTimeFormatter.ofPattern(format)));
	}

	@Test
	public void doTesting() {
		timeZone tz = new timeZone();
		tz.setName("Test1");
		tz.setTz("Test2");
		assertThat(this.restTemplate.getForObject("http://localhost:" + port + "/Testing",
				timeZone.class)).isEqualToComparingFieldByField(tz);
	}
	
	//1 Test to see if time is accurate 
	@Test
	public void timeCheck() {
		Date date = new Date(System.currentTimeMillis());	
		
		ZonedDateTime time2 = ZonedDateTime.now(ZoneId.of("UTC"));
		assertThat(this.restTemplate.postForObject("http://localhost:" + port + "/UTC", ""
				, String.class)).isEqualTo(time2.format(formatter));
	}
	
}
